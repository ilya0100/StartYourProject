#pragma once

#include "handlers.hpp"


#define LOGIN_DATA_DONT_MATCH "Username and password dont match"
#define SAME_USER "A user with the same name already exists"
#define USER_NOT_FOUND "User with this nickname does not exist"
#define SAME_PROJECT "A project with the same name already exists"
#define NEED_AUTHORIATION "Authorization is required for this operation."
#define CONTENT_NOT_FOUND "Rrequested information not found"
#define SAME_NAME "The name already exists"
#define CONTENT_NOT_FOUND "Requested content not found"
#define DB_ERROR "Data base error"

/////////////////////////// User Handlers ///////////////////////////////
template <typename JSON>
void LoginHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json_req(request->get_body());
    UserData data;

    data.username = json_req.template get<std::string>("username", "");
    data.password = json_req.template get<std::string>("password", "");

    ResponseStatus status = usecase.checkUser(data);

    response->set_status(status, request->is_keep_alive());
    if (status == ResponseStatus::ok)
        return;

    switch (status) {
    case ResponseStatus::not_found:
        response->set_body(USER_NOT_FOUND);
        break;

    case ResponseStatus::unauthorized:
        response->set_body(LOGIN_DATA_DONT_MATCH);
        break;

    default:
        response->set_status(ResponseStatus::server_error);
        return;
    }
}

template <typename JSON>
void RegisterHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    UserData data;

    data.username = json.template get<std::string>("username", "");
    data.password = json.template get<std::string>("password", "");
    data.email = json.template get<std::string>("email", "");

    ResponseStatus status = usecase.addUser(data);

    response->set_status(status, request->is_keep_alive());
    if (status == ResponseStatus::ok)
        return;

    switch (status) {
    case ResponseStatus::forbidden:
        response->set_body(SAME_USER);
        break;

    default:
        response->set_status(ResponseStatus::server_error);
        return;
    }
}

template <typename JSON>
void EditProfileHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    UserData data;
 
    data.auth_token = json.template get<std::string>("auth_token", "");
    data.username = json.template get<std::string>("username", "");
    data.email = json.template get<std::string>("email", "");
    data.name = json.template get<std::string>("name", "");
    data.sur_name = json.template get<std::string>("sur_name", "");
    data.user_discription = json.template get<std::string>("user_discription", "");
    data.password = json.template get<std::string>("password", "");

    ResponseStatus status = usecase.editUserData(data);

    response->set_status(status, request->is_keep_alive());
    if (status == ResponseStatus::ok)
        return;

    switch (status) {
    case ResponseStatus::unauthorized:
        response->set_body(NEED_AUTHORIATION);
        break;

    case ResponseStatus::not_found:
        response->set_body(USER_NOT_FOUND);
        break;

    default:
        response->set_status(ResponseStatus::server_error);
        return;
    }
}

template <typename JSON>
void DelUserProfileHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    UserData data;

    data.auth_token = json.template get<std::string>("auth_token", "");
    data.username = json.template get<std::string>("username", "");

    ResponseStatus status = usecase.delUserData(data);

    response->set_status(status, request->is_keep_alive());
    if (status == ResponseStatus::ok)
        return;

    switch (status) {
    case ResponseStatus::unauthorized:
        response->set_body(NEED_AUTHORIATION);
        break;

    case ResponseStatus::not_found:
        response->set_body(USER_NOT_FOUND);
        break;

    default:
        response->set_status(ResponseStatus::server_error);
        return;
    }
}

template <typename JSON>
void GetUserProfileHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    std::string username;

    username = json.template get<std::string>("username", "");

    Message<UserData> msg = usecase.getUserData(username);
    JSON json_response;

    json_response.put("username", msg.data.username);
    json_response.put("email", msg.data.email);
    json_response.put("name", msg.data.name);
    json_response.put("sur_name", msg.data.sur_name);
    json_response.put("user_discription", msg.data.user_discription);
    json_response.put("password", msg.data.password);


    response->set_status(msg.status, request->is_keep_alive());
    if (msg.status == ResponseStatus::ok) {
        response->set_body(json_response.serialize(), ContentType::json);
        return;
    }

    switch (msg.status) {
    case ResponseStatus::not_found:
        response->set_body(USER_NOT_FOUND);
        break;

    default:
        response->set_status(ResponseStatus::server_error);
        return;
    }
}

/////////////////////////// Posts Handlers ////////////////////////////////

template <typename JSON>
void CreatePostHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    ProjectData data;
   
    data.username  = json.template get<std::string>("username", "");
    data.project_name  = json.template get<std::string>("project_name", "");
    data.team_name  = json.template get<std::string>("team_name", "");
    data.post_tags  = json.template get<std::vector<std::string>>("post_tags", std::vector<std::string>());
    data.teammates  = json.template get<std::vector<std::string>>("teammates", std::vector<std::string>());
    data.project_description  = json.template get<std::string>("project_description", "");
    
    ResponseStatus status = usecase.addPostToDB(data);

    response->set_status(status, request->is_keep_alive());
    if (status == ResponseStatus::ok)
        return;

    switch (status) {
    case ResponseStatus::forbidden:
        response->set_body(SAME_NAME);
        break;

    default:
        response->set_status(ResponseStatus::server_error);
        return;
    }
}


template <typename JSON>
void EditPostHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    ProjectData data;

    std::string token = json.template get<std::string>("auth_token", "");

    data.username = json.template get<std::string>("username", "");
    data.project_name = json.template get<std::string>("project_name", "");
    data.team_name = json.template get<std::string>("team_name", "");
    data.post_tags = json.template get<std::vector<std::string>>("post_tags", std::vector<std::string>());
    data.teammates = json.template get<std::vector<std::string>>("teammates", std::vector<std::string>());
    data.project_description = json.template get<std::string>("project_description", "");

    ResponseStatus status = usecase.editPostToDB(data, token); 

    response->set_status(status, request->is_keep_alive());
    if (status == ResponseStatus::ok)
        return;

    switch (status) {
    case ResponseStatus::unauthorized:
        response->set_body(NEED_AUTHORIATION);
        break;

    case ResponseStatus::not_found:
        response->set_body(CONTENT_NOT_FOUND);
        break;

    case default:
        response->set_status(ResponseStatus::server_error);
        return;
    }
}

template <typename JSON>
void GetPostHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    std::string project_name;

    project_name = json_req.template get<std::string>("project_name", "");

    Message<ProjectData> msg = usecase.getPost(project_name);
    JSON json_respoonse;

    json_respoonse.put("username", msg.data.username);
    json_respoonse.put("project_name", msg.data.project_name);
    json_respoonse.put("team_name", msg.data.team_name);
    json_respoonse.put("post_tags", msg.data.post_tags);
    json_respoonse.put("teammates", msg.data.teammates);
    json_respoonse.put("project_description", msg.data.project_description);

    response->set_status(msg.status, request->is_keep_alive());
    if (msg.status == ResponseStatus::ok) {
        response->set_body(json_respoonse.serialize(), ContentType::json);
        return;
    }

    switch (msg.status) {
    case ResponseStatus::not_found:
        response->set_body(CONTENT_NOT_FOUND);
        break;

    default:
        response->set_status(ResponseStatus::server_error);
        return;
    }
}


template <typename JSON>
void DeletePostHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    ProjectData data;

    data.project_name = json.template get<std::string>("project_name", "");
    data.username = json.template get<std::string>("username", "");
    std::string token = json.template get<std::string>("auth_token", "");

    ResponseStatus status = usecase.delPostData(data, token);

    response->set_status(status, request->is_keep_alive());
    if (status == ResponseStatus::ok)
        return;

    switch (status) {
    case ResponseStatus::unauthorized:
        response->set_body(NEED_AUTHORIATION);
        break;

    case ResponseStatus::not_found:
        response->set_body(CONTENT_NOT_FOUND);
        break;

    default:
        response->set_status(ResponseStatus::server_error);
        return;
    }
}

template <typename JSON>
void SearchPersonHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    std::string username;

    
    response->set_status(ResponseStatus::not_implemented);
}


template <typename JSON>
void MakeRequestToPostHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());

    response->set_status(ResponseStatus::not_implemented);
}


template <typename JSON>
void AnswerTheRequestHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());

    response->set_status(ResponseStatus::not_implemented);
}



template <typename JSON>
void ShowNotificationsHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
   
    response->set_status(ResponseStatus::not_implemented);
}
