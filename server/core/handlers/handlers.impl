#pragma once

#include "handlers.hpp"



/////////////////////////// User Handlers ///////////////////////////////
template <typename JSON>
void LoginHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json_req(request->get_body());
    UserData data;

    data.username = json_req.template get<std::string>("username");
    data.password = json_req.template get<std::string>("password");

    ResponseStatus status = usecase.checkUser(data);

    if (status != ResponseStatus::ok) {
        response->set_error_message(status);
        return;
    }
    response->set_status(status, request->is_keep_alive());
    response->set_body(data.auth_token, ContentType::text);
}

template <typename JSON>
void RegisterHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    UserData data;

    data.username = json.template get<std::string>("username");
    data.password = json.template get<std::string>("password");
    data.email = json.template get<std::string>("email");

    ResponseStatus status = usecase.addUser(data);

    if (status != ResponseStatus::ok) {
        response->set_error_message(status);
        return;
    }
    response->set_status(status, request->is_keep_alive());
}

template <typename JSON>
void EditProfileHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    UserData data;
 
    data.auth_token = json.template get<std::string>("auth_token");
    data.username = json.template get<std::string>("username");
    data.email = json.template get<std::string>("email");
    data.name = json.template get<std::string>("name");
    data.sur_name = json.template get<std::string>("sur_name");
    data.user_description = json.template get<std::string>("user_description");
    data.password = json.template get<std::string>("password");

    ResponseStatus status = usecase.editUserData(data);

    if (status != ResponseStatus::ok) {
        response->set_error_message(status);
        return;
    }
    response->set_status(status, request->is_keep_alive());
}

template <typename JSON>
void DelUserProfileHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    UserData data;

    data.auth_token = json.template get<std::string>("auth_token");
    data.username = json.template get<std::string>("username");

    ResponseStatus status = usecase.delUserData(data);

    if (status != ResponseStatus::ok) {
        response->set_error_message(status);
        return;
    }
    response->set_status(status, request->is_keep_alive());
}

template <typename JSON>
void GetUserProfileHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    std::string username;

    username = json.template get<std::string>("username");

    Message<UserData> msg = usecase.getUserData(username);
    if (msg.status != ResponseStatus::ok) {
        response->set_error_message(msg.status);
        return;
    }
    JSON json_response;

    json_response.put("username", msg.data.username);
    json_response.put("email", msg.data.email);
    json_response.put("name", msg.data.name);
    json_response.put("sur_name", msg.data.sur_name);
    json_response.put("user_description", msg.data.user_description);
    json_response.put("password", msg.data.password);

    response->set_status(msg.status, request->is_keep_alive());
    response->set_body(json_response.serialize(), ContentType::json);
}

/////////////////////////// Posts Handlers ////////////////////////////////

template <typename JSON>
void CreatePostHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    ProjectData data;
    std::string token;
   
    token  = json.template get<std::string>("auth_token");
    data.username  = json.template get<std::string>("username");
    data.project_name  = json.template get<std::string>("project_name");
    data.team_name  = json.template get<std::string>("team_name");
    data.post_tags  = json.template get<std::vector<std::string>>("post_tags");
    data.teammates  = json.template get<std::vector<std::string>>("teammates");
    data.project_description  = json.template get<std::string>("project_description");
    
    ResponseStatus status = usecase.addPostToDB(data, token);

    if (status != ResponseStatus::ok) {
        response->set_error_message(status);
        return;
    }
    response->set_status(status, request->is_keep_alive());
}


template <typename JSON>
void EditPostHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    ProjectData data;

    std::string token = json.template get<std::string>("auth_token");

    data.username = json.template get<std::string>("username");
    data.project_name = json.template get<std::string>("project_name");
    data.team_name = json.template get<std::string>("team_name");
    data.post_tags = json.template get<std::vector<std::string>>("post_tags");
    data.teammates = json.template get<std::vector<std::string>>("teammates");
    data.project_description = json.template get<std::string>("project_description");

    ResponseStatus status = usecase.editPostToDB(data, token); 

    if (status != ResponseStatus::ok) {
        response->set_error_message(status);
        return;
    }
    response->set_status(status, request->is_keep_alive());
}

template <typename JSON>
void GetPostHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    std::string project_name;

    project_name = json.template get<std::string>("project_name");

    Message<ProjectData> msg = usecase.getPost(project_name);
    if (msg.status != ResponseStatus::ok) {
        response->set_error_message(msg.status);
        return;
    }
    JSON json_respoonse;

    json_respoonse.put("username", msg.data.username);
    json_respoonse.put("project_name", msg.data.project_name);
    json_respoonse.put("team_name", msg.data.team_name);
    json_respoonse.put("post_tags", msg.data.post_tags);
    json_respoonse.put("teammates", msg.data.teammates);
    json_respoonse.put("project_description", msg.data.project_description);

    response->set_status(msg.status, request->is_keep_alive());
    response->set_body(json_respoonse.serialize(), ContentType::json);
}


template <typename JSON>
void DeletePostHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    ProjectData data;

    data.project_name = json.template get<std::string>("project_name");
    data.username = json.template get<std::string>("username");
    std::string token = json.template get<std::string>("auth_token");

    ResponseStatus status = usecase.delPostData(data, token);

    if (status != ResponseStatus::ok) {
        response->set_error_message(status);
        return;
    }
    response->set_status(status, request->is_keep_alive());
}

template <typename JSON>
void SearchPersonHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
    std::string username;

    
    response->set_status(ResponseStatus::not_implemented);
}


template <typename JSON>
void MakeRequestToPostHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());

    response->set_status(ResponseStatus::not_implemented);
}


template <typename JSON>
void AnswerTheRequestHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());

    response->set_status(ResponseStatus::not_implemented);
}



template <typename JSON>
void ShowNotificationsHandler<JSON>::handle(RequestInterface* request, ResponseInterface* response) {
    JSON json(request->get_body());
   
    response->set_status(ResponseStatus::not_implemented);
}
